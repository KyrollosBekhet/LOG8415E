# Before executing these commands make sure to have all the needed files
# It is better to put all the needed files in the root directory 
# The needed files are the app.py (our flask app), nginxConfig file (generated by the python script) and finally this script
#mkdir flaskapp
#mv app.py flaskapp/
# in your AWS instance
# First we need to edit the behavior of the VM to restart the services automatically to prevent user interaction
sudo sed -i 's/#$nrconf{restart} = '"'"'i'"'"';/$nrconf{restart} = '"'"'a'"'"';/g' /etc/needrestart/needrestart.conf
# Second update the AMI
#sudo apt-get update -y
# Make sure that python3 is iinstalled
#sudo apt-get install python3 -y
#sudo chmod 777 /var/cache/debconf/
#sudo chmod 777 /var/cache/debconf/passwords.dat
#echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
#sudo apt-get install -y -q

# Install pip
#sudo apt-get install python3-pip -y
# Install the nginx server
#sudo apt-get install nginx -y
# Install the gunicorn (a package needed to deploy a fask server)
#sudo apt-get install gunicorn3 -y
# Install flask using pip
#sudo pip3 install flask
# Install ec2-metadta (The python module used by the app to know the
# insatnce id)
#sudo pip3 install ec2-metadata
#sudo sed -i 's/#server_names_hash_bucket_size 64;/server_names_hash_bucket_size 128;/g' /etc/nginx/nginx.conf
#sudo mv nginxconfig /etc/nginx/sites-enabled
#sudo fuser -k 443/tcp
#sudo fuser -k 80/tcp
# After adding the flaskapp file under /etc/nginx/sites-enabled inside
# the AWS instance execute this command
# restarting nginx service to take in count
			   # the file that has been added to the
			   # directory /etc/nginx/sites-enabled


# Go inside the directory where your flask application is and execute

